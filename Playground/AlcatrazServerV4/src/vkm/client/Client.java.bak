package vkm.client;

import java.io.Serializable;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

import vkm.Player;
import vkm.server.IServer;
import at.falb.games.alcatraz.api.Alcatraz;
import at.falb.games.alcatraz.api.MoveListener;
import at.falb.games.alcatraz.api.Prisoner;

public class Client extends UnicastRemoteObject 
	implements IClient, MoveListener, Serializable //, Runnable
{
	private int numberOfPlayers;
	private IServer sro;
	private Player player;
	private Player [] players;
	private IClient [] clients;
	private int serverPort = 20000;
	private Alcatraz alcatraz;

	public static void main(String[] args)
	{
		if(args.length < 3)
		{
			System.out.println("USAGE: Client <Name> <Number of players> <client port>");
		}
		else
		{
			try
			{
				String name = args[0];
				int players = Integer.parseInt(args[1]);
				int port = Integer.parseInt(args[2]);
				
				Client client = new Client(name, players, port);
				client.startClientRegistry(port);
				client.publishClientObject();
				
				IServer server = client.bindServerObject();				
				server.Register(client.player, client.numberOfPlayers);
				System.out.println(server.getRegisteredUsers());
			} 
			catch (RemoteException e)
			{
				e.printStackTrace();
			}
		}		
	}
	
	public Client(String name, int numberOfPlayers, int clientPort)throws java.rmi.RemoteException
	{
		this.numberOfPlayers = numberOfPlayers;
		
		player = new Player();
		player.Name = name;
		
		try
		{
			player.Adress ="rmi://"+InetAddress.getLocalHost().getHostAddress()+":"+(clientPort)+"/AlcatrazClient";
			player.Adress ="rmi://localhost:"+(clientPort)+"/AlcatrazClient";
		} 
		catch (UnknownHostException e)
		{
			System.out.println("Cannot locate ip-address");
			e.printStackTrace();
		}
	}
	private void startClientRegistry(int clientPort)
	{
		//Startet die Client Registry
		try
		{
			java.rmi.registry.LocateRegistry.createRegistry(clientPort);
			System.out.println("Registry startet at port "+clientPort);
		} 
		catch (RemoteException e)
		{			
			System.out.println("Error at while starting registry: ");
			e.printStackTrace();
		}
	}
	private void publishClientObject()
	{
		//Gibt Client Objekt auf die Client Registry damit Server zugriff hat
		//zur Info, wenn Spiel gestartet wird
	    try 
	    {
	    	System.out.println("Rebind client object at rmi-registry: " + player.Adress);
	    	Naming.rebind(player.Adress, this);
	    } 
	    catch (Exception e) 
	    {
	    	System.out.println("Trouble: " + e);
	    }
	}
	public IServer bindServerObject()
	{
		//Bindet Serverobjekt zum Aufrufen der Methoden
		try
		{
			String address = "rmi://localhost:"+serverPort+"/AlcatrazService";
			System.out.println("Bind server object from registry: " + address);
			sro =(IServer)Naming.lookup(address);
		}
		catch (Exception e)
		{
			System.out.println("Error: ");
			e.printStackTrace();
		}
		return sro;
	}

	public void StartGame(Player[] players) 
	{
		this.players = players;
		// called either by server or by first player
		System.out.println("--------->Client starts now the game<------------");
		
		// bind other clients
		int clientCounter = 0;
		clients = new IClient[players.length - 1];
		for (int i = 0; i < players.length; i++) {
			if (PlayerIndex(players) != i) {
				clients[clientCounter++] = bindClientObject(players[i].Adress, players);
			}
		}
		
		// if this is the first player, start other players
		if (PlayerIndex(players) == 0) {
			for (int i = 0; i < clients.length; i++) {
				try {
					clients[i].StartGame(players);				
				} catch (Exception e) {
					System.out.println("Error: ");
					e.printStackTrace();
				}
			}
			// start game and make first move
			StartAlcatraz();			
		}
	}
	private int PlayerIndex(Player[] players)
	{
		for (int i = 0; i < players.length; i++) {
			if (players[i].Adress.equals(this.player.Adress)) {
				return i;
			}
		}
		return -1;
	}
	private IClient bindClientObject(String address, Player[] clients)
	{
		//Bindet Serverobjekt zum Aufrufen der Methoden
		try
		{
			System.out.println("Bind client object from registry: " + address);
			IClient client = (IClient)Naming.lookup(address);
			return client;
		}
		catch (Exception e)
		{
			System.out.println("Error: ");
			e.printStackTrace();
		}
		return null;
	}
	public void StartAlcatraz()
	{
		System.out.println("Start Alcatraz");
		alcatraz = new Alcatraz();
		alcatraz.init(players.length,PlayerIndex(players));
		for (int i = 0; i < players.length; i++) 
		{
			System.out.println("Set Alcatraz Player Name " + i + ":" + players[i].Name);
			alcatraz.getPlayer(i).setName(players[i].Name);
		}
		alcatraz.showWindow();
		alcatraz.addMoveListener(this);
		alcatraz.showWindow();
	}

	public void doMove(int playerId, int prisonerId, int rowOrCol, int row,
			int col) {
		
		// if youre not the first player, start now
		if (alcatraz == null)
			StartAlcatraz();
		
		alcatraz.doMove(alcatraz.getPlayer(playerId), alcatraz.getPrisoner(prisonerId), rowOrCol, row, col);
	}

	public void doMove(at.falb.games.alcatraz.api.Player player, Prisoner prisoner, int rowOrCol, int row, int col) {
		// TODO Auto-generated method stub
        System.out.println("moving " + prisoner + " to " + (rowOrCol == Alcatraz.ROW ? "row" : "col") + " " + (rowOrCol == Alcatraz.ROW ? row : col));
        for (int i = 0; i < clients.length; i++) {
			try {
				clients[i].doMove(player.getId(), prisoner.getId(), rowOrCol, row, col);
			} catch (Exception e) {
				System.out.println("Error: ");
				e.printStackTrace();
			}
		}
	}
	public void gameWon(at.falb.games.alcatraz.api.Player arg0) {
		// TODO Auto-generated method stub
		
	}
	public void undoMove() {
		throw new RuntimeException("undoMove not supported");		
	}
}

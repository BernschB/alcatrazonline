/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GameGUI.java
 *
 * Created on 21.04.2011, 20:10:33
 */
package at.technikum.sam.remote.alcatraz.client;

import at.falb.games.alcatraz.api.Alcatraz;
import at.technikum.sam.remote.alcatraz.commons.GameRegistryException;
import at.technikum.sam.remote.alcatraz.commons.GameStartException;
import at.technikum.sam.remote.alcatraz.commons.NameAlreadyInUseException;
import at.technikum.sam.remote.alcatraz.commons.PlayerAdapter;
import at.technikum.sam.remote.alcatraz.commons.IClient;
import at.technikum.sam.remote.alcatraz.commons.Util;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author stefanschramek
 */
public class GameGUI extends javax.swing.JFrame implements GameStartedListener {
    
    public final static String HOST = null;
    public final static int PORT = -1;
  
    private static ClientImplementation myClient = null;
    private static PlayerAdapter myPlayer = null;
    private static Alcatraz theGame = null;

    /** Creates new form GameGUI */
    public GameGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tfName = new javax.swing.JTextField();
        tfServer = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jCheckBox1 = new javax.swing.JCheckBox();
        tbRegister = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tfName.setToolTipText("");
        tfName.setName("null"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(tfName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(tfServer, gridBagConstraints);

        jLabel1.setText("Spielername:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Server:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jLabel2, gridBagConstraints);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setMaximumSize(new java.awt.Dimension(20, 40));
        jList1.setMinimumSize(new java.awt.Dimension(20, 40));
        jList1.setPreferredSize(new java.awt.Dimension(20, 40));
        jList1.setSize(new java.awt.Dimension(20, 40));
        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 117;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jCheckBox1.setText("Force Start");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jCheckBox1, gridBagConstraints);

        tbRegister.setText("Register");
        tbRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbRegisterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        getContentPane().add(tbRegister, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbRegisterActionPerformed
        // TODO add your handling code here:
        if (this.tbRegister.getName() == "Register") {
            IClient clientStub = null;
            myClient = new ClientImplementation();
        
            try {
                clientStub = (IClient) UnicastRemoteObject.exportObject(myClient, 0);
            } catch (RemoteException ex) {
                ex.printStackTrace();
                System.exit(-1);
            } catch (Exception ex) {
                ex.printStackTrace();
                System.exit(-1);
            }
        
            if(clientStub == null) {
                Util.printDebug("ClientStub is null");
                System.exit(-1);
            }
        
        
            //Anmerkung Stefan: isAlive RÃ¼ckgabewert wird nicht weiterverarbeitet!
            try {
                clientStub.isAlive();
            } catch (RemoteException ex) {
               ex.printStackTrace();
            }

            if (this.tfName.getText() != null) {
                myPlayer = new PlayerAdapter(this.tfName.getText(), myClient);
                try {
                    String[] serverAddress = this.tfServer.getText().split(":");
                    myClient.init(serverAddress[0], Integer.valueOf(serverAddress[1]), myPlayer);
                    myClient.installListener(new GameClient());
                } catch (Exception ex) {
                    //TODO: ExceptionHandling
                    ex.printStackTrace();
                  }
            }

            try {
                myClient.getMasterServer().register(myPlayer);
                myClient.getMasterServer().forceStart(myPlayer);
            } catch (NameAlreadyInUseException ex) {
                ex.printStackTrace();
                System.exit(-1);
            } catch (GameStartException ex) {
                ex.printStackTrace();                
            } catch (RemoteException ex) {
                ex.printStackTrace();
                System.exit(-1);
            } catch (Exception ex) {
                ex.printStackTrace();
                System.exit(-1);
            }
            
            this.tbRegister.setName("Unregister");

            Util.printDebug(
                    "Player ".
                    concat(myPlayer.getName()).
                    concat(" is registered with server")
                    );

            if (theGame != null) {
                theGame.showWindow();
            } else {
                System.exit(-1);
            }
        }
    if (this.tbRegister.getName() == "Unregister") {
        try {
            myClient.getMasterServer().unregister(myPlayer);
        } catch (Exception e) {
            e.printStackTrace();
        }                
        this.tbRegister.setName("Register");
    }
        
    }//GEN-LAST:event_tbRegisterActionPerformed

    public void gameStarted(Alcatraz game) {
        theGame = game;
        this.setVisible(false);
        theGame.showWindow();
    }    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GameGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton tbRegister;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfServer;
    // End of variables declaration//GEN-END:variables
}
